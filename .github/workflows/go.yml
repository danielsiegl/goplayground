# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
  
jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            shell: bash
            binary: linux
            arch: amd64

         # https://github.com/actions/partner-runner-images
          - os: ubuntu-24.04-arm
            shell: bash
            binary: linux
            arch: arm64

          # needs a paid plan            
          # - os: macos-latest-large
          #   shell: bash
          #   binary: macos
          #   arch: amd64

          - os: macos-latest
            shell: bash
            binary: macos
            arch: arm64

          - os: windows-latest
            shell: pwsh
            binary: windows
            arch: amd64

          # not working on GitHub ACitons  but on real machine
          # - os: windows-latest
          #   shell: pwsh
          #   binary: windows
          #   arch: aarch64
    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Output OS and Architecture
      shell: pwsh
      run: |
        ./.github/workflows/os-info.ps1 -Title "Tests run on" -MatrixOS "${{ matrix.os }}" -MatrixShell "${{ matrix.shell }}" -MatrixBinary "${{ matrix.binary }}" -MatrixArch "${{ matrix.arch }}"

    - name: Test
      run: go test -v ./...

  build:
    defaults:
      run:
        shell: pwsh
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: ./build.ps1
    
    - name: Upload binary Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: goplayground-binaries
        path: bin/**/*
        retention-days: 5

  run-binary:
    name: Run binary on ${{ matrix.os }}-${{ matrix.arch }}
    needs: build
    runs-on: ${{ matrix.os }}
    env:
      COMMAND: nocommand
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            shell: pwsh
            binary: linux
            arch: amd64

          # https://github.com/actions/partner-runner-images
          - os: ubuntu-24.04-arm
            shell: pwsh
            binary: linux
            arch: arm64

          # needs a paid plan            
          # - os: macos-latest-large
          #   shell: bash
          #   binary: macos
          #   arch: amd64

          - os: macos-latest
            shell: pwsh
            binary: macos
            arch: arm64

          - os: windows-latest
            shell: pwsh
            binary: windows
            arch: amd64

          # not working on GitHub ACitons  but on real machine
          # - os: windows-latest
          #   shell: pwsh
          #   binary: windows
          #   arch: aarch64 

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
    - uses: actions/checkout@v4

    - name: Download binary artifacts
      uses: actions/download-artifact@v4
      with:
        name: goplayground-binaries
        path: bin

    - name: Output OS and Architecture
      shell: pwsh
      run: |
        ./.github/workflows/os-info.ps1 -Title "Software run on" -MatrixOS "${{ matrix.os }}" -MatrixShell "${{ matrix.shell }}" -MatrixBinary "${{ matrix.binary }}" -MatrixArch "${{ matrix.arch }}"

    - name: Prepare binary and command for Linux/MacOS
      if: matrix.os != 'windows-latest'
      shell: pwsh
      run: |
        # make binary executable
        chmod +x bin/goplayground-${{ matrix.binary }}-${{ matrix.arch }}
        # Store command for reuse
        $command = "./bin/goplayground-${{ matrix.binary }}-${{ matrix.arch }} -contract-file ./bin/config/contract.json -store"
        echo "COMMAND=$command" >> $env:GITHUB_ENV
    
    - name: Prepare binary and command for Windows
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Store command for reuse
        $command = "./bin/goplayground-${{ matrix.binary }}-${{ matrix.arch }}.exe -contract-file ./bin/config/contract.json -store"
        echo "COMMAND=$command" >> $env:GITHUB_ENV     
        
    - name: Execute and log command
      shell: pwsh
      run: |
        # Create data directory for database
        New-Item -ItemType Directory -Force -Path data

        Write-Output "Command: ${{ env.COMMAND }}"
        $OUTPUT = & ${{ env.COMMAND }}
        Write-Output "Output:"
        Write-Output $OUTPUT

        Write-Output "### Command executed:" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "``````${{ matrix.shell }}" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "${{ env.COMMAND }}" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "``````" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "### Command output:" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "``````${{ matrix.shell }}" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "$OUTPUT" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "``````" >> $env:GITHUB_STEP_SUMMARY
