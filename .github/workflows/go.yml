# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
  
jobs:
  test:
    name: Test on ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [arm64,amd64]
        include:
          - os: ubuntu-latest
            shell: bash
          - os: macos-latest
            shell: bash
          - os: windows-latest
            shell: pwsh
    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Test
      run: go test -v ./...

  build:
    defaults:
      run:
        shell: pwsh
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: ./build.ps1
    
    - name: Upload binary Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: goplayground-binaries
        path: bin/**/*
        retention-days: 5

  run-binary:
    name: Run binary on ${{ matrix.os }}-${{ matrix.arch }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            shell: bash
            binary: linux
            arch: amd64
          - os: ubuntu-latest
            shell: bash
            binary: linux
            arch: arm64
          - os: macos-latest
            shell: bash
            binary: macos
            arch: amd64
          - os: macos-latest
            shell: bash
            binary: macos
            arch: arm64
          - os: windows-latest
            shell: pwsh
            binary: windows
            arch: amd64
          - os: windows-latest
            shell: pwsh
            binary: windows
            arch: arm64
    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
    - name: Download binary artifacts
      uses: actions/download-artifact@v4
      with:
        name: goplayground-binaries
        path: bin

    - name: List artifacts directory
      run: ls -r bin

    - name: Make binary executable (Unix)
      if: matrix.os != 'windows-latest'
      run: chmod +x bin/goplayground-${{ matrix.binary }}-${{ matrix.arch }}
      shell: bash

    - name: Run binary with -store option
      if: matrix.os != 'windows-latest'
      run: |
        # Create data directory for database
        mkdir -p data
        # Run the binary with -store option
        ./bin/goplayground-${{ matrix.binary }}-${{ matrix.arch }} -contract-file ./bin/config/contract.json -store
    
    - name: Run binary with -store option
      if: matrix.os == 'windows-latest'
      run: |
        # Create data directory for database
        mkdir -p data
        # Run the binary with -store option
        ./bin/goplayground-${{ matrix.binary }}-${{ matrix.arch }}.exe -contract-file ./bin/config/contract.json -store
